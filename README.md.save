# Сервис YaMD

b
____

Проект YaMDb собирает отзывы пользователей на произведения. Произведения делятся на категории: «Книги», «Фильмы», «Музыка». Список категорий может быть расширен администратором.

## Технологии
- Django rest_framework
- Django rest_framework_simplejwt
- Django django_filters
- Git
- Docker
- NGINX
- GUNICORN
- POSTGRES
____

## Как запустить проект:

### Клонировать репозиторий:
git clone git@github.com:Rinko69/infra_sp2.git

### Перейдите в директорию infra_sp2\infra и создайте файл .env:

### Шаблон наполнения файла:
- DB_ENGINE=django.db.backends.postgresql # указываем, что работаем с postgresql
- DB_NAME=postgres # имя базы данных
- POSTGRES_USER=username # логин для подключения к базе данных
- POSTGRES_PASSWORD=password # пароль для подключения к БД (установите свой)
- DB_HOST=db # название сервиса (контейнера)
- DB_PORT=5432 # порт для подключения к БД 

### Для запуска приложения в контейнерах перейдите в директорию "infra_sp2\infra" и выполните команды:
docker-compose up -d --build 

### Для создания суперюзера выполинте команду:

docker-compose exec web python manage.py createsuperuser

**Теперь проект готов к работе и доступен по адресу http://localhost/api/v1.
И также доступен доступ к админке: http://localhost/admin/login/?next=/admin/.**
____

### Чтобы сделать резервную копию базы данных выполните команду из директории infra_sp2\infra:
docker-compose exec web python manage.py dumpdata > fixtures.json

### Чтобы скопировать файл базы данных в контейнер выполните команду из директории infra_sp2/infra:
docker cp fixtures.json <id>:app/
  
### И подгрузите данные БД из директории infra\docker-compose.yaml:
docker-compose exec web python manage.py loaddata fixtures.json
____

## Руководство к проекту:
### Пользовательские роли:
- Аноним — может просматривать описания произведений, читать отзывы и комментарии.
- Аутентифицированный пользователь (user) — может читать всё, как и Аноним, может публиковать отзывы и ставить оценки произведениям (фильмам/книгам/песенкам), может комментировать отзывы; может редактировать и удалять свои отзывы и комментарии, редактировать свои оценки произведений. Эта роль присваивается по умолчанию каждому новому пользователю.
- Модератор (moderator) — те же права, что и у Аутентифицированного пользователя, плюс право удалять и редактировать любые отзывы и комментарии.
- Администратор (admin) — полные права на управление всем контентом проекта. Может создавать и удалять произведения, категории и жанры. Может назначать роли пользователям.
- Суперюзер Django должен всегда обладать правами администратора, пользователя с правами admin. Даже если изменить пользовательскую роль суперюзера — это не лишит его прав администратора.

### Алгоритм регистрации пользователей:
- Пользователь отправляет POST-запрос с параметрами email и username на эндпоинт /api/v1/auth/signup/.
- Сервис YaMDB отправляет письмо с кодом подтверждения (confirmation_code) на указанный адрес email.
- Пользователь отправляет POST-запрос с параметрами username и confirmation_code на эндпоинт /api/v1/auth/token/, в ответе на запрос ему приходит token (JWT-токен).
- В результате пользователь получает токен и может работать с API проекта, отправляя этот токен с каждым запросом.

### Создание пользователя администратором:
Пользователя может создать администратор — через админ-зону сайта или через POST-запрос на специальный эндпоинт api/v1/users/ (описание полей запроса для этого случая — в документации).
В этот момент письмо с кодом подтверждения пользователю отправлять не нужно. После этого пользователь должен самостоятельно отправить свой email и username на эндпоинт /api/v1/auth/signup/ , в ответ ему должно прийти письмо с кодом подтверждения.
Далее пользователь отправляет POST-запрос с параметрами username и confirmation_code на эндпоинт /api/v1/auth/token/, в ответе на запрос ему приходит token (JWT-токен), как и при самостоятельной регистрации.
____

## Ресурсы сервиса API YaMDb:
- auth: аутентификация.
- users: пользователи.
- titles: произведения, к которым пишут отзывы (определённый фильм, книга или песенка).
- categories: категории (типы) произведений («Фильмы», «Книги», «Музыка»).
- genres: жанры произведений. Одно произведение может быть привязано к нескольким жанрам.
- reviews: отзывы на произведения. Отзыв привязан к определённому произведению.
- comments: комментарии к отзывам. Комментарий привязан к определённому отзыву.
